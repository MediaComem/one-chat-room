#!/usr/bin/env node

import chalk from 'chalk';
import debugFactory from 'debug';
import http from 'http';
import { Server as SocketIoServer } from 'socket.io';

import app from '../app.js';
import * as config from '../config.js';

const debug = debugFactory('one-chat-room:server');

app.set('port', config.port);

const httpServer = http.createServer(app);

const io = new SocketIoServer(httpServer);
app.set('io', io);

Promise.resolve()
  .then(app.start)
  .then(startServer)
  .then(onHttpServerListening)
  .catch(onHttpServerError)
  .catch(err => {
    console.error(chalk.red(err.stack));
    process.exit(1);
  });

/**
 * Listen on provided port, on all network interfaces.
 */
function startServer() {
  return new Promise((resolve, reject) => {
    httpServer.listen(config.port);
    httpServer.on('error', reject);
    httpServer.on('listening', resolve);
  });
}

function onHttpServerError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      throw new Error(`Port ${config.port} requires elevated privileges`);
    case 'EADDRINUSE':
      throw new Error(`Port ${config.port} is already in use`);
    default:
      throw error;
  }
}

function onHttpServerListening() {
  debug(`Listening on port ${config.port}`);
}
